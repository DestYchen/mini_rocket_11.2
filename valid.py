import numpy as np
from ui import full_df

list_pos=['2.1.1','2.1.2','2.1.2.1','2.1.3','2.1.4','2.1.5','2.1.6','2.1.7','2.1.7.1','2.1.7.2',
          '2.1.8','2.1.9','2.2.1','2.2.2','2.2.2.1','2.2.3','2.2.4','2.2.5','2.2.6','2.2.7','2.2.7.1',
          '2.2.7.2','2.2.8','2.2.9','2.2.10','3.1.1.1','3.1.1.2','3.1.1.3','3.1.1.4','3.1.1.5','3.1.1.6',
          '3.1.1.7','3.1.1.8','3.1.1.9','3.1.1.10','3.1.1.11','3.1.1.12','3.1.1.13','3.1.1.14','3.1.1.15',
          '3.1.2.1','3.1.2.2','3.1.2.3','3.1.2.4','3.1.2.5','3.1.2.6','3.1.2.7','3.1.2.8','3.1.2.9',
          '3.1.2.10','3.1.2.11','3.1.2.12','3.1.2.13','3.1.2.14','3.1.2.15','3.1.3.1','3.1.3.2','3.1.3.3',
          '3.1.3.4','3.1.3.5','3.1.3.6','3.1.3.7','3.1.3.8','3.1.3.9','3.1.3.10','3.1.3.11','3.1.3.12',
          '3.1.3.13','3.1.3.14','3.1.3.15','3.1.4.1','3.1.4.2','3.1.4.3','3.1.4.4','3.1.4.5','3.1.4.6',
          '3.1.4.7','3.1.4.8','3.1.4.9','3.1.4.10','3.1.4.11','3.1.4.12','3.1.4.13','3.1.4.14','3.1.4.15',
          '3.1.5.1', '3.1.5.2', '3.1.5.3', '3.1.5.4', '3.1.5.5', '3.1.5.6', '3.1.5.7', '3.1.5.8', '3.1.5.9',
          '3.1.5.10', '3.1.5.11', '3.1.5.12','3.1.5.13', '3.1.5.14', '3.1.5.15','3.2.1.1','3.2.1.2','3.2.1.3',
          '3.2.1.4','3.2.1.5','3.2.1.6','3.2.1.7','3.2.1.8','3.2.1.9','3.2.1.10','3.2.1.11','3.2.1.12',
          '3.2.1.13','3.2.1.14','3.2.1.15','3.2.2.1','3.2.2.2','3.2.2.3','3.2.2.4','3.2.2.5','3.2.2.6',
          '3.2.2.7','3.2.2.8','3.2.2.9','3.2.2.10','3.2.2.11','3.2.2.12','3.2.2.13','3.2.2.14','3.2.2.15',
          '3.2.3.1','3.2.3.2','3.2.3.3','3.2.3.4','3.2.3.5','3.2.3.6','3.2.3.7','3.2.3.8','3.2.3.9','3.2.3.10',
          '3.2.3.11','3.2.3.12','3.2.3.13','3.2.3.14','3.2.3.15','3.2.4.1','3.2.4.2','3.2.4.3','3.2.4.4','3.2.4.5',
          '3.2.4.6','3.2.4.7','3.2.4.8','3.2.4.9','3.2.4.10','3.2.4.11','3.2.4.12','3.2.4.13','3.2.4.14','3.2.4.15',
          '3.2.5.1', '3.2.5.2', '3.2.5.3', '3.2.5.4', '3.2.5.5', '3.2.5.6', '3.2.5.7', '3.2.5.8', '3.2.5.9',
          '3.2.5.10', '3.2.5.11', '3.2.5.12','3.2.5.13', '3.2.5.14', '3.2.5.15','4.1','4.66','4.7','4.69','4.70',
          '4.71','4.72','4.11','4.12','4.19','4.21','4.23','4.25','4.27','4.76','4.31','4.32','4.33','4.42','4.78',
          '4.79','4.80','4.81','4.82','4.83','4.83.1','5.1','5.4','5.8','5.9','5.10','5.12','5.16','5.18','5.20','5.22',
          '5.31','5.32','5.40','5.49','5.57','5.58','5.59','5.60','5.61','5.62','5.46','5.48','5.50','5.51',
          '5.63','5.64','5.66.1','5.65','5.66','5.71']
list_otr=['4.37','4.38','4.41','4.43','5.34','5.35','5.39','5.41']
list_comp=[('2.1.2.1','2.1.2'),('2.1.3','2.1.2'),('2.1.6','2.1.5'),('4.66','4.4'),('4.67','4.5'),('4.67.1','4.5'),
           ('4.70','4.9'),('4.71','4.9'),('4.72','4.9'),('4.73','4.10'),('4.74','4.10'),('4.19','4.18'),
           ('4.20','4.18'),('4.21','4.18'),('4.22','4.18'),('4.23','4.18'),('4.25','4.24'),('4.26','4.24'),
           ('4.27','4.24'),('4.28','4.24'),('4.76','4.24'),('4.33','4.32'),('4.34','4.32'),('5.10','5.9'),
           ('5.12','5.9'),('5.19','5.18'),('5.21','5.20'),('5.32','5.31'),('5.33','5.31'),('5.47','5.46'),
           ('5.48','5.46'),('5.63','5.46'),('5.64','5.46'),('5.50','5.49'),('5.51','5.49'),('5.65','5.49'),
           ('5.66','5.49'),]#(меньший пункт, больший пункт)

list_comp_abs=[('4.80','4.79'),('4.81','4.79'),('4.82','4.79'),('5.35','5.34'),('4.77','4.49'),]

list_eq=[('4.12',['4.1',]), ('5.1',['5.16',]),]#(пункт правила, [равная сумма пунктов])

def check_pos(df_tmp,lk_name,dates,sign):#TRUE - проверяем, что нет отриц ; False - нет неотриц значений
    res=[]
    if sign:
        l=list_pos
    else:
        l=list_otr
    for pn in l:
        for d in dates:
            if sign:
                #flag=(full_df[d].loc[full_df['point_number']==pn]<0).any()
                a=df_tmp[d].loc[df_tmp['point_number'] == pn].array
                if a:
                    flag = (a[0] < 0)
            else:
                #flag = (full_df[d].loc[full_df['point_number'] == pn] >0).any()
                a = df_tmp[d].loc[df_tmp['point_number'] == pn].array
                if a:
                    flag = (a[0] > 0)
            if flag:
                full_df.loc[(full_df['point_number'] == pn) & (full_df['lk_name'] == lk_name), d]=-a[0]
                res.append([d,pn,sign])
    return res

def check_compar(df_tmp,dates):#проверяем, что пункт меньше другого
    res=[]
    for pn in list_comp:
        for d in dates:
            if (df_tmp[d].loc[df_tmp['point_number']==pn[0]].array[0]>df_tmp[d].loc[df_tmp['point_number']==pn[1]].array[0]):
                res.append([d,pn])
    return res

def check_compar_abs(df_tmp,dates):#проверяем, что пункт меньше другого по модулю
    res=[]
    for pn in list_comp_abs:
        for d in dates:
            if (np.abs(df_tmp[d].loc[df_tmp['point_number']==pn[0]].array[0])>np.abs(df_tmp[d].loc[df_tmp['point_number']==pn[1]].array[0])):
                res.append([d,pn])
    return res

def check_eq(df_tmp,dates):#проверяем на выполнение равенства
    res=[]
    for pn in list_eq:
        for d in dates:
            s=0
            for i in pn[1]:
                s+=df_tmp[d].loc[df_tmp['point_number']==i].array[0]
            if (not df_tmp[d].loc[df_tmp['point_number']==pn[0]].array[0]==s):
                res.append([d, pn])
    return res

def validate_data():
    df_tmp=full_df.copy()
    df_tmp.fillna(0, inplace=True)
    df_tmp = np.round(df_tmp, decimals=0)
    lk_names=df_tmp['lk_name'].drop_duplicates()
    dates = df_tmp.columns.values.tolist()[10:]
    valid_dict={}
    #проверяем каждую компанию
    #проверка знаков и соответствующие исправления
    for comp in lk_names:
        valid_res = check_pos(df_tmp.loc[df_tmp['lk_name'] == comp],comp, dates, True)
        valid_res2 = check_pos(df_tmp.loc[df_tmp['lk_name'] == comp],comp, dates, False)
        if any(not len(r)==0 for r in [valid_res,valid_res2]):
            valid_dict[comp]={}
            #знак
            if not len(valid_res)==0:
                valid_dict[comp]['pos']=valid_res
            if not len(valid_res2)==0:
                valid_dict[comp]['otr']=valid_res2
    df_tmp=full_df.copy()
    df_tmp.fillna(0, inplace=True)
    df_tmp = np.round(df_tmp, decimals=0)
    for comp in lk_names:
        valid_res3 = check_compar(df_tmp.loc[df_tmp['lk_name'] == comp], dates)
        valid_res4=check_compar_abs(df_tmp.loc[df_tmp['lk_name'] == comp], dates)
        valid_res5=check_eq(df_tmp.loc[df_tmp['lk_name'] == comp], dates)
        #если есть нарушения, то в словаре ответа добавляем строку для ЛК
        if any(not len(r)==0 for r in [valid_res3,valid_res4,valid_res5]):
            if comp not in valid_dict:
                valid_dict[comp]={}
            if not len(valid_res3)==0:
                valid_dict[comp]['compare']= valid_res3
            if not len(valid_res4)==0:
                valid_dict[comp]['compare_abs']=valid_res4
            if not len(valid_res5)==0:
                valid_dict[comp]['eq']=valid_res5
    return valid_dict
